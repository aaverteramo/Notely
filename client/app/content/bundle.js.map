{"version":3,"sources":["app.js","components/sign-up.js","notes/notes.js","services/notes-service.js","services/users-service.js","users/users.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["// IFFE for our notely application.\n(function() {\n  // Inject dependancy for ui.router into the notely application / module.\n  // ** Array of other modules to include.\n  var app = angular.module('notely', [\n    'ui.router',\n    'notely.notes'\n  ]);\n  \n  function config($urlRouterProvider) {\n    // If request does not find a valid page, route to '/notes'\n    $urlRouterProvider.otherwise('/notes/');\n  }\n\n  config['$inject'] = ['$urlRouterProvider'];\n  app.config(config);\n  // Add an API_BASE constant to the app to represent the main server url.\n  app.constant('API_BASE', 'http://localhost:3000/api/v1/');\n// Invoke the function.\n})();\n","angular.module('notely')\r\n  // Always declare directives using camelCase. The directive in mark up will be 'dasherized'.\r\n  .directive('signUp', ['UsersService', (UsersService) => {\r\n\r\n    // Declare the controller as an ES6 class.\r\n    class SignUpController {\r\n      constructor() {\r\n        this.user = {};\r\n      }\r\n      submit() {\r\n        // Create the user.\r\n        UsersService.create(this.user)\r\n          .then(\r\n            function(response) {\r\n              // success\r\n              console.log('success');\r\n            },\r\n            function(response) {\r\n              // failure\r\n              console.log('failure');\r\n            });\r\n      }\r\n    }\r\n\r\n    // Definte the behavior of the directive.\r\n    return {\r\n      // Give each instance of the directive its own scope.\r\n      scope: {},\r\n      controller: SignUpController,\r\n      // Inside the directive's view, we can refer to the controller as 'ctrl'.\r\n      controllerAs: 'ctrl',\r\n      // Isolates the scope defined here.\r\n      bindToController: true,\r\n      templateUrl: '/components/sign-up.html'\r\n    };\r\n  }]);\r\n","// Create IIFE for the Notes page.\r\n(function() {\r\n  // Add a notes module to the main notely module.\r\n  angular.module('notely.notes', [\r\n    'ui.router',\r\n    'textAngular'\r\n  ])\r\n    // Configure the controller.\r\n    .config(notesConfig);\r\n    // Assign array of all things to be injected into the notesConfig function.\r\n    // ** Do this to allow minification of our .js\r\n    notesConfig.$inject = ['$stateProvider'];\r\n    // Configure the notes controller.\r\n    function notesConfig($stateProvider) {\r\n      $stateProvider\r\n        // State is similar to a URL / Page / Route\r\n        // Notes - #/notes\r\n        .state('notes', {\r\n          url: '/notes',\r\n          // Provide a function to run before the controller is loaded.\r\n          // If any of the functions in 'resolve' returns a promise, that promise must be resolved before continuing on.\r\n          resolve: {\r\n            // Define the action to complete before continuing on to the Controller.\r\n            // Inject arguments into the function using array annotation.\r\n            notesLoaded: ['NotesService', function(NotesService) {\r\n              // Get all notes.\r\n              return NotesService.fetch();\r\n            }]\r\n          },\r\n          // Template replaces contents of the object containing the ui-view attribute.\r\n          templateUrl: '/notes/notes.html',\r\n          // Set the controller for this state.\r\n          controller: NotesController\r\n        })\r\n        // Create a child-state for the notes form.\r\n        .state('notes.form', {\r\n          // Use /: to define parameters.\r\n          url: '/:noteId',\r\n          templateUrl: '/notes/notes-form.html',\r\n          controller: NotesFormController\r\n        })\r\n    }\r\n\r\n    // Define the NotesController\r\n    NotesController.$inject = ['$state', '$scope', 'NotesService'];\r\n    function NotesController($state, $scope, NotesService) {\r\n      $scope.note = {};\r\n      // Callback function should get the result of the async service method.\r\n      // Set a $scope vairable to the result;\r\n      $scope.notes = NotesService.get();\r\n    }\r\n\r\n    // Create the NotesFormController\r\n    NotesFormController.$inject = ['$scope', '$state', 'NotesService'];\r\n    function NotesFormController($scope, $state, NotesService) {\r\n      // Use the $state.params to get all params declared in the .state definitions.\r\n      $scope.note = NotesService.findById($state.params.noteId);\r\n\r\n      // Create a function used to save the model.\r\n      $scope.save = function() {\r\n          // Decide whether to call create or update.\r\n          if ($scope.note._id) {\r\n            // Update an existing note.\r\n            console.log('Need to update the note.');\r\n            NotesService.update($scope.note)\r\n              .then(function(response) {\r\n                // Reset the $scope.note so we have the scrubbed body_html.\r\n                $scope.note = angular.copy(response.data.note);\r\n              });\r\n          }\r\n          else {\r\n            if ($scope.note.title && $scope.note.body_html) {\r\n              // Create the note.\r\n              NotesService.create($scope.note)\r\n                .then(function(response) {\r\n                  $state.go('notes.form', { noteId: response.data.note._id });\r\n                });\r\n              console.log('saved note!');\r\n            }\r\n            else {\r\n              console.log('cannot save note!');\r\n            }\r\n          }\r\n      };\r\n\r\n      $scope.delete = function() {\r\n        // Delete the note.\r\n        NotesService.delete($scope.note)\r\n          .then(function(response) {\r\n            $state.go('notes.form', { noteId: undefined });\r\n          });\r\n      };\r\n\r\n      $scope.buttonText = function() {\r\n        return $scope.note._id ? 'Save Changes' : 'Save';\r\n      };\r\n    }\r\n\r\n// Invoke the function.\r\n})();\r\n","// Create a service.js to communicate with the server.\r\n// This can be used by multiple controllers to CRUD data.\r\n\r\n// Use the existing main module.\r\nangular.module('notely')\r\n  // Add a service to the main module.\r\n  .service('NotesService', NotesService);\r\n\r\n// Create the service [function].\r\n// Inject Dependencies\r\nNotesService.$inject = ['$http', 'API_BASE'];\r\nfunction NotesService($http, API_BASE) {\r\n  // Create a variable to represent the NotesService, since the meaning of 'this' will change.\r\n  var service = this;\r\n  // Create a placeholder for all of our notes.\r\n  service.notes = [];\r\n  // Create a function to fetch data from the server.\r\n  // Add a callback parameter: function to run on success.\r\n  service.fetch = function(onSuccess, onError) {\r\n    // Send an $http get request (promise) to the specified URL.\r\n    // Return the request promise.\r\n    return $http.get(API_BASE + 'notes')\r\n      // Create a function to handle the $http response.\r\n      .then(\r\n        // Success callback.\r\n        function(response) {\r\n          service.notes = response.data;\r\n          if (onSuccess) {\r\n            // If there is a callback action provided, call it and return the result.\r\n            onSuccess(service.notes);\r\n          }\r\n        },\r\n        // Failure callback\r\n        function(response) {\r\n          // TODO: Handle error.\r\n          if (onError) {\r\n            // If there is a callback action provided, call it.\r\n            onError();\r\n          }\r\n        });\r\n  };\r\n  // Create a method to return the NotesService notes array.\r\n  service.get = function() {\r\n      return service.notes;\r\n  };\r\n  // Create a method to return a single note by searching by id.\r\n  service.findById = function(noteId) {\r\n    // Find the note in service.notes with a matching _id.\r\n    for (var i = 0; i < service.notes.length; i++) {\r\n      if (service.notes[i]._id === noteId) {\r\n        // Use angular to return a copy of the object.\r\n        return angular.copy(service.notes[i]);\r\n        // Use JSON to return a copy of the object.\r\n        //return JSON.parse(JSON.stringify(service.notes[i]));\r\n      }\r\n    }\r\n    return {};\r\n  };\r\n  // Create a method to save the note to the collection.\r\n  service.create = function(note) {\r\n    // Get the promise to return.\r\n    var promise = $http.post(API_BASE + 'notes', {\r\n      note: note\r\n    });\r\n    // Do work with the promise in the service.\r\n    promise.then(function(response) {\r\n      // Add the saved note to the top of the array.\r\n      service.notes.unshift(response.data.note);\r\n      console.log('Note has been created!');\r\n    });\r\n    // Return the promise.\r\n    return promise;\r\n  };\r\n  // Create a method to update an existing note.\r\n  service.update = function(note) {\r\n    // Get the promise to return.\r\n    var promise = $http.put(API_BASE + 'notes/' + note._id, {\r\n      // Only specify fields that can be updated from the client side.\r\n      note: {\r\n        title: note.title,\r\n        body_html: note.body_html\r\n      }\r\n    });\r\n    // Do work with the promise in the service.\r\n    promise.then(function(response) {\r\n      // Replace the saved note in the array.\r\n      service.replaceNote(response.data.note);\r\n      console.log('Note has been updated!');\r\n    });\r\n    // Return the promise.\r\n    return promise;\r\n  };\r\n  // Create a method to delete an existing note.\r\n  service.delete = function(note) {\r\n    // Delete the note.\r\n    var promise = $http.delete(API_BASE + 'notes/' + note._id);\r\n    // Do work with the promise in the service.\r\n    promise.then(function(response) {\r\n      // Remove the deleted note from the array.\r\n      service.removeNote(note);\r\n      console.log('Note has been deleted!');\r\n    });\r\n    // Return the promise.\r\n    return promise;\r\n  };\r\n  // Replace a note in the array.\r\n  service.replaceNote = function(note) {\r\n    for (var i = 0; i < service.notes.length; i++) {\r\n      if (service.notes[i]._id === note._id) {\r\n        service.notes[i] = note;\r\n      }\r\n    }\r\n  };\r\n  // Remove a note from the array.\r\n  service.removeNote = function(note) {\r\n    for (var i = 0; i < service.notes.length; i++) {\r\n      if (service.notes[i]._id === note._id) {\r\n        // Remove the array item at the provided index.\r\n        service.notes.splice(i, 1);\r\n      }\r\n    }\r\n  };\r\n}\r\n","// Use the existing notely module.\r\nangular.module('notely')\r\n  // Create a new service, inject the dependencies.\r\n  .service('UsersService', ['$http', 'API_BASE', ($http, API_BASE) => {\r\n    class UsersService {\r\n      // Create a user.\r\n      create(user) {\r\n        // Get the promise to return.\r\n        let promise = $http.post(`${API_BASE}users`, {\r\n          user: user\r\n        });\r\n        // Do work with the promise in the service.\r\n        promise.then((response) => {\r\n          console.log(response.data);\r\n        });\r\n        // Return the promise.\r\n        return promise;\r\n      };\r\n    }\r\n    // Return an instance of the service class.\r\n    return new UsersService();\r\n  }]);\r\n","(function() {\r\n  angular.module('notely')\r\n    .config(usersConfig);\r\n\r\n  usersConfig.$inject = ['$stateProvider'];\r\n  function usersConfig($stateProvider) {\r\n    $stateProvider\r\n      .state('sign-up', {\r\n        url: '/sign-up',\r\n        // Use a directive we have defined ourselves.\r\n        template: '<sign-up></sign-up>'\r\n      });\r\n  };\r\n})();\r\n"],"sourceRoot":"/source/"}